% layout 'default';
% title 'this page';

<script type="text/javascript" src="https://maps.google.com/maps/api/js?key=AIzaSyBtLOrp4b2x0j71FcDb1Vn9topnZPTNtaM"></script>
<script type="text/javascript" src="https://westwind.backbone.site/js/librtc.js"></script>
<script type="text/javascript">

// const starttime = performance.now();  // perf

    var timerarray = [];
    var maintimerID = null;

    var gpsSetId = null;

    loopstart();  // 起動先行

function loopstart(){
        // timer objectを繰り返し実行する
        maintimerID = window.setInterval( function() {
            console.log("DEBUG: timerarray: " + timerarray.length );
            if ( timerarray.length == 0 ) { return; }
            var fn = timerarray.shift();
                fn;
                timerarray.push(fn);  // 再度戻す
        },5000); // 5sec
}

    var CrosTimer = null;
    var socket_wait = null;
    var ws = null;

    var startflg = null;  // localstreamのon/off判定
    var connid = null;

    var elobj = {}; //createElementの格納場所  削除で利用 chatroom List用

    var chatRoomInfo = {}; // chatroom情報
        chatRoomInfo.callStat = "call";  // call前の状態

    var memberList = {};  // chatroomのメンバーリスト格納場所
        memberList.memberList = new Array;
        memberList.memberListObjs = new Object;
        memberList.memberList_diff = new Array;
        memberList.rtctype = new Object;

    var tagtext = new Object;   //file投稿用タグデータ

    var user_stat = {
                       loc : { lat : '0' ,
                               lng : '0'
                             },
                       name : localStorage.user,
                       uid : localStorage.uid,
                       status : "dummy",
                       category : "USER",
                       time : "",
                       ttl : "",
                       icon_url : localStorage.icon_url,
                       category : "USER",
                       rundirect : 0,
                       hitcount : 0,
                       damagecount : 0,
                      };

    if ( typeof(localStorage.user_stat) === 'undefined' ){
        %#無ければ書く
        localStorage.user_stat = JSON.stringify(user_stat);
        // ここではまだwsが接続されていない
    } else {
        %# 在れば書き戻す
        user_stat = JSON.parse(localStorage.user_stat);
    }

     var map = new Object;
         map.ghostobjects = new Object;;

     var ghostMax = 3;

     var ghostlist = new Object;

    wsCall();  // 起動先行

function wsCall(){
    ws = new WebSocket('wss://<%= $url_host %>/wsocket/signaling');
    console.log(" Websocket connect...");
    return ws;
}


    ws.onopen = function(){
        console.log('Connection opened');
if (false){  // serverからに変更
        socket_wait = setInterval(function (){
           var dummsg = {"dummy":"dummy"};
           ws.send(JSON.stringify(dummsg));
           console.log("socket wait sending!");
            }, 50000)

        timerarray.push(socket_wait);
} // block
        usercheck(); // window.onloadから移転	
        sendsession();

    };   // onopen

    ws.onclose = function(){
        console.log("WS Connection close... reconnect...");
        clearInterval(socket_wait); // 50sec dummy STOP
        alert("制御用接続が切れました。通話はリロードするまで続けられますが文字チャットなどは使えません。");

        //user_statの保存
        localStorage.user_stat = JSON.stringify(user_stat);
    };

    ws.onerror = function(){
       alert("please Reload, Reconnect websocket!");
    };

    ws.onmessage = function(msg){
                var evt = JSON.parse(msg.data);
                console.log(JSON.stringify(evt));


           %# dummyが来たらパス
           if ( evt.dummy ){
               return;
           }

           if ( evt.type ) {

               if ( evt.type === "wsidnotice" ){
                     sessionStorage.wsid = evt.wsid;
                     user_stat.wsid = sessionStorage.wsid;
                     return;
               }

               if ( evt.type === "oidnotice" ){
                     icon_del(); // localStorage.icon_urlを参照して、データを削除する。
                     localStorage.icon_url = "https://<%= $url_host %>/geticon?oid=" + evt.oid;
                     usercheck(); 
                     return;
               }

               if ( evt.type === "openchat" ){

                  var str = evt.text;
                      evt.text = str.replace(/<("[^"]*"|'[^']*'|[^'">])*>/g, "");  // tag delete
                      console.log("DEBUG: evt.text: " + evt.text);

                  var liobj = document.createElement("li");
                      liobj.setAttribute("id" , "openchatout");
                      liobj.innerHTML = "<img src=" + evt.icon_url + " > [" + evt.user + "] " + evt.text ;
                  var ulobj = document.getElementById("openchat");

                    //  ulobj.appendChild(liobj);
                      ulobj.insertBefore(liobj,ulobj.firstChild);

                  return;
               }

               if ( evt.type === "roomlistnotice" ) {

                   var roomlist = evt.chatroomlist;

                       elobj.aobj = new Array;

                   if (roomlist.length === 0 ){ 

                       elobj.aobj.push(document.createElement("p"));
                       elobj.aobj[0].innerHTML = "<H1> None of chat room... <H1>";
                       var roomdiv = document.getElementById("roomlistout");
                           roomdiv.appendChild(elobj.aobj[0]); // 固定

                   } else {

                   for (var e in roomlist) {
                       console.log("DEBUG: e:" + e);

                       elobj.aobj.push(document.createElement("button"));
                       elobj.aobj[e].setAttribute("id", "roomlistout" + e);
                       elobj.aobj[e].setAttribute("class", "addbutton");
                       elobj.aobj[e].innerHTML = roomlist[e];
                       elobj.aobj[e].value = roomlist[e];
                       elobj.aobj[e].onclick = function(){
                                              var mess = {"type" : "entrychatroom" , 
                                                          "roomname": this.value ,
                                                          "user" : localStorage.user ,
                                                          "icon_url" : localStorage.icon_url ,
                                                          "wsid" : sessionStorage.wsid ,
                                                          "pubstat" : "public"
                                                         };
                                              var messjson = JSON.stringify(mess);
                                              ws.send(messjson);
                                              console.log("DEBUG: " + messjson );
 
                                              chatRoomInfo.roomname = this.value; 
                                              chatRoomInfo.pubstat = "public";
                                              };

                       var roomdiv = document.getElementById("roomlistout");
                           roomdiv.appendChild(elobj.aobj[e]);
                       console.log("append element: " + roomlist[e] );
                       } // for
                      } // roomlist length else

                   return;
               }
  
               // memberListの受信
               if ( evt.type === "reslist" ) {

                   console.log("DEBUG: catch reslist");

                   connid = evt.from; 

                   memberList.reslist = evt.reslist;

                   if ( memberList.memberList.length === 0 ) {
                       // 初回のみ 
                       memberList.memberList = JSON.parse(JSON.stringify(memberList.reslist)); //インスタンス実体 
                       memberList.memberList_diff = memberList.memberList; // 初回はすべてが差分

                   } else {

                       // 2回目以降はこっち
                       memberList.memberList_diff = new Array;  // 初期化

                               memberList.reslist.filter( function (e , i ) {
                                         // memberlistとreslistからダブらないものをピックアップ
                                   var flg = 0;
                                   memberList.memberList.filter( function(e2 ,i2){
                                       if ( e.wsid == e2.wsid ){ 
                                           flg = 1;
                                           return;
                                          }
                                   });
                                   if ( flg == 0 ) {
                                             memberList.memberList_diff.push(e);
                                   }
                               });

                       console.log("DEBUG: memberList_diff: " + JSON.stringify(memberList.memberList_diff) );


                       // memberListにmemberList_diffをマージする
                       memberList.memberList_diff.filter ( function(e,i){
                           memberList.memberList.push(e);
                       });

                  } // if memberList.length

                  for ( var i=0 ; i < memberList.memberList_diff.length ; i++) {

                      var resline = memberList.memberList_diff[i];

                      memberList.memberListObjs[resline.wsid] = document.createElement("li");
                      memberList.memberListObjs[resline.wsid].setAttribute("id" , "chatroommember" + resline.wsid);
                 
                      // 自分用とそれ以外で表示を変える
                      if ( sessionStorage.wsid === resline.wsid ) {
                          memberList.memberListObjs[resline.wsid].innerHTML = "<button class='memlist' id='btn" + resline.wsid + "' onclick='call();' style='color: #00ff00;'><img src=" + resline.icon_url + " > [" + resline.user + "] Call </button><form class='memlist' id=choi" + resline.wsid + "><input type='radio' name='vvchoi' value='audio' checked>audio</label><input type='radio' name='vvchoi' value='video'>video</label></form><button class='memlist' value='Change Camera' onclick='changecam();'>Change Camera</button><div id='div" + resline.wsid + "'></div>";
                          } else {
                          memberList.memberListObjs[resline.wsid].innerHTML = "<img src=" + resline.icon_url + " > [" + resline.user + "]<div id='div" + resline.wsid + "'></div>";
                          }
                      var ulobj = document.getElementById("chatroommember");

                          ulobj.appendChild(memberList.memberListObjs[resline.wsid]);

                      //ラジオボタンの入力イベント
                      if ( sessionStorage.wsid == resline.wsid ) {
                          document.getElementById("choi" + resline.wsid ).addEventListener('click', function(){

                              // 自分で自分に更新させる
                              var mess = { "getrtctype" : "dummy" ,
                                           "sendto" : sessionStorage.wsid ,
                                           "from" : sessionStorage.wsid ,
                                         };    
                              var messjson = JSON.stringify(mess);
                              ws.send(messjson);

                              console.log("DEBUG: getrtctype self sending...");

                              reloadmem(); // タグの更新の為にリロードさせる
                          }); 
                      }

                  } // for

                  // リストが表示されたらaudioかvideoを判別して表示する
                  for (var aline in memberList.memberList){
                      var mess = { "getrtctype" : "dummy" ,
                                   "sendto" : memberList.memberList[aline].wsid ,
                                   "from" : sessionStorage.wsid ,
                                 };    
                      var messjson = JSON.stringify(mess);
                      ws.send(messjson);

                      console.log("DEBUG: getrtctype send: " + memberList.memberList[aline].wsid );
                  }
                  
                   return;
               }  // if reslist

               // reload要求
               if ( evt.type === "reloadmember" ){
                   console.log("DEBUG: GET reloadmemberlist!!");
                   member();       
                   return;
               }

               // チャットルーム内のチャット
               if ( evt.type === "chatroomchat" ){
                  var liobj = document.createElement("li");
                      liobj.setAttribute("id" , "chatroomout");
                      liobj.innerHTML = "<img src=" + evt.icon_url + " > [" + evt.user + "] " + evt.text ;
                  var ulobj = document.getElementById("chatroomout");

                      ulobj.insertBefore(liobj,ulobj.firstChild);
                  return;
               }

               // public chatroom List からのエントリー受付
               if ( evt.type === "entrychatroomact" ){

               // chatroom char chat 別の場所に重複あり
                    document.getElementById('cchat').addEventListener("keydown" , function(){   
                        if ((event.keyCode === 13) && (document.getElementById('cchat').value )) {

                        var messtext = document.getElementById('cchat').value.replace(/<("[^"]*"|'[^']*'|[^'">])*>/g, "");  // tag delete

                            var mess = {"type" : "chatroomchat" ,
                                        "text": messtext ,
                                        "user" : localStorage.user ,
                                        "icon_url" : localStorage.icon_url,
                                        "roomname" : chatRoomInfo.roomname ,
                                        "pubstat" : chatRoomInfo.pubstat
                                        };
                            var messjson = JSON.stringify(mess);
                            ws.send(messjson);
                            document.getElementById('cchat').value = "";
                            console.log("DEBUG: send chatroomchat");
                        }
                    });

                   member();
                   reloadmem();

                   // makechatroomを表示に変更する
                   menuList.makeChatRoomToggle = false;
                   document.getElementById("makechatroom").style.display="block";  // 表示
                   document.getElementById('roomdisplay').innerHTML = chatRoomInfo.roomname ;

                   return;
               }

               // usercheckでuidの確認レスポンス
               if ( evt.type === "resobsoleteuid" ){
                       if (evt.res === "nonobsolete"){
                           console.log("DEBUG: nonobsolete...");
                           usercheck2();
                       } else if ( evt.res === "obsolete" ) {
                           console.log("DEBUG: obsolete...reset uid");

                           localStorage.clear(); // 全て削除

                           usercheck2();
                       }
                return;
               }


           // webRTC
    // SDP,ICE処理
    var id = evt.from;
    var target = evt.sendto;  // call時はundef

    console.log("id:(from)" + id);
    console.log("target:(sendto)" + target);

       if (evt.type === 'call') {
            console.log('Receive call');

           if (isConnectPossible()) {
             %# callを受信したら、responseを返す
              var resp = JSON.stringify({"type":"response","sendto":id});
              ws.send(resp);
              console.log("send response----->");
              }
              else {
                  console.warn('max connections. so ignore call');
              }
              return;
       }
              else if (evt.type === 'response'){
                console.log('Receive response');
                sendOffer(id);
                return;
            }  else if (evt.type === 'offer') {
              console.log("Received offer, set offer, sending answer....")
              onOffer(evt);
            } else if (evt.type === 'answer') {  // **
              console.log('Received answer, settinng answer SDP');
              onAnswer(evt);
            } else if (evt.type === 'candidate') { // **
              console.log('Received ICE candidate...');
              onCandidate(evt);
            } else if (evt.type === 'bye') { // **
              console.log("disconnected");
              //stop();
              detachvoice(id); // force detach video
              stopAllConnections();
           }

           // over webRTC

           if ( evt.type === "detachvoice" ){
              //相手のhungupを受けてstreamを切り離す
               detachvoice(evt.from); // force detach video
            //   stopConnection(evt.from);

               delMemberList(evt.from);
    
               console.log("DEBUG: detachvoice: evt.from ");

               return;
           }

           if ( evt.type === "resiconrotate" ){
               console.log("DEBUG: recieve: resiconrotate");

               var imgobj = document.getElementById('uicon');
                   imgobj.src = localStorage.icon_url + "&oriented=" + evt.oriented; //　更新のためにパラメータを付加

               return;
           }

           if ( evt.type === 'filenotice' ){
               console.log("DEBUG: recieve: filenotice");

               var divobj = document.getElementById('picchat-img');

               console.log("DEBUG: evt.mime: " + evt.mime );
               %# .indexOfで不一致-1,一致　0なので、 ~で反転すると、不一致0　一致-1で不一致はパスするように成る false 0でtrue その他になる
               if ( ~evt.mime.indexOf('jpg') || ~evt.mime.indexOf('jpeg') || ~evt.mime.indexOf('png') || ~evt.mime.indexOf('gif') ){
               %# 画像
                       tagtext.oid = evt.oid;
                       tagtext.tag = "<img width='350' higth='350' src=https://<%= $url_host %>/fileout?oid=" + tagtext.oid + "></img>";
                       divobj.innerHTML = tagtext.tag;

               } else if ( ~evt.mime.indexOf('mpeg') || ~evt.mime.indexOf('3gp') || ~evt.mime.indexOf('mp4') || ~evt.mime.indexOf('m4a') || ~evt.mime.indexOf('mpg') || ~evt.mime.indexOf('mp3') || ~evt.mime.indexOf('octet-stream') ){
               %# 動画
                       tagtext.oid = evt.oid;
                       tagtext.tag = "<video width='350' hight='350' controls src=https://<%= $url_host %>/fileout?oid=" + tagtext.oid +"></video>";
                       divobj.innerHTML = tagtext.tag;

               } else if ( ~evt.mime.indexOf('pdf')) {
               %# pdf
                      tagtext.oid = evt.oid;
                      tagtext.tag = "<object type='application/pdf' data=https://<%= $url_host %>/fileout?oid=" + tagtext.oid + "></object>";
                      divobj.innerHTML = tagtext.tag;
               }

               return;
           }


               return;
           }  // if type

           if ( evt.getrtctype ) {
               // 他のブラウザからaudio/videoのラジオボックスの状態を返信する
               var rtcelm = document.getElementById("choi" + sessionStorage.wsid);
               var nodeList = rtcelm.vvchoi;
               var mess = { "resrtctype" : nodeList.value ,
                            "sendto" : evt.from ,
                            "from": sessionStorage.wsid
                          };
               var messjson = JSON.stringify(mess);

               ws.send(messjson); 

               console.log("DEBUG: resrtctype send " + messjson );

               return;
           }

           // 自分が出したgetrtctypeのレスポンスを受け取る
           if ( evt.resrtctype ){
               console.log("DEBUG: get resrtctype");
 
               //   memberList.memberListは表示情報の配列
               //   memberList.rtctype.wsid はWebRTCの種別でaudioかvideoのオブジェクトをwsidのキーで登録
               //   rtctypeはタグから取得すると大文字のケースが存在するのでtoLowerCaseで比較する

               for ( var aline in memberList.memberList ){
                   // 受信したresrtctypeの状態を確認する 基本1人づつ受信する

                   if (( evt.from === memberList.memberList[aline].wsid )&&(evt.from === sessionStorage.wsid)) {
                       console.log("DEBUG: own element " + evt.from + " | " + memberList.memberList[aline].wsid);

                       if ( typeof(memberList.rtctype[evt.from]) === 'undefined' ) {

                           //エレメント設定
                           var elm = document.getElementById("div" + evt.from);

                           memberList.rtctype[evt.from] = document.createElement(evt.resrtctype); // audio or video
                           memberList.rtctype[evt.from].setAttribute('id' , "stream" + evt.from );
                         //  memberList.rtctype[evt.from].setAttribute('autoplay' , 'autoplay');
                           memberList.rtctype[evt.from].setAttribute('controls', 'controls');

                           elm.appendChild(memberList.rtctype[evt.from]); 

                           chatRoomInfo.rtctype = evt.resrtctype;

                           console.log("DEBUG: set rtctype: " + evt.resrtctype );
                           console.log("DEBUG: connid: " + connid );

                           if (( typeof(connid) !== 'undefined' )&& (typeof(startflg) !== 'started' ) ){  // reslistを1回受け取ってから
                               console.log("DEBUG: startflg: " + startflg );
                               startvoice();
                            }

                           return;
                       } // undefined 


                      // var tagname = memberList.rtctype[evt.from].tagName;
                  else if ( memberList.rtctype[evt.from].tagName.toLowerCase() === evt.resrtctype ){
                                  // 設定済で同じならパス
                                  console.log("DEBUG: rtctype No change!" + tagname + " | " + evt.resrtctype);
                                  return;
                       } else {

                              // エレメント再設定
                           var elm = document.getElementById("div" + evt.from);
                               elm.removeChild(memberList.rtctype[evt.from]);

                           memberList.rtctype[evt.from] = document.createElement(evt.resrtctype); // audio or video
                           memberList.rtctype[evt.from].setAttribute('id' , "stream" + evt.from );
                        //   memberList.rtctype[evt.from].setAttribute('autoplay' , 'autoplay');
                           memberList.rtctype[evt.from].setAttribute('controls', 'controls');

                           elm.appendChild(memberList.rtctype[evt.from]); 

                           chatRoomInfo.rtctype = evt.resrtctype;

                           console.log("DEBUG: set rtctype: " + evt.resrtctype );
                           console.log("DEBUG: connid: " + connid );
     
                           startflg = 'restart'; // 再設定なのでリスタート
                           detachvoice(connid);  // localStreamを一度停止
                  
                           if (( typeof(connid) !== 'undefined' )&& (typeof(startflg) !== 'started' ) ){  // reslistを1回受け取ってから
                               console.log("DEBUG: startflg: " + startflg );
                               startvoice();
                            }

                           return; 
                           } // else  if rtctype 以上が自分あてのrtctype処理
                   //以下は他のメンバーのrtctype処理  
                   } else if ( evt.from === memberList.memberList[aline].wsid ) { // if [aline].wsid  sessionStorage.wsid
                       // evtとループのwsidが一致すれば

                       console.log("DEBUG: resrtctype other member ");

                       if ( typeof(memberList.rtctype[evt.from]) === 'undefined' ) {

                           //エレメント設定
                           var elm = document.getElementById("div" + evt.from);
                           memberList.rtctype[evt.from] = document.createElement(evt.resrtctype); // audio or video
                           memberList.rtctype[evt.from].setAttribute('id' , "stream" + evt.from );
                           memberList.rtctype[evt.from].setAttribute('autoplay' , 'autoplay');
                           memberList.rtctype[evt.from].setAttribute('controls', 'controls');

                           elm.appendChild(memberList.rtctype[evt.from]); 
                           console.log("DEBUG: set rtctype: " + evt.resrtctype + " wsid: " + evt.from );

                           return;

                       } 

                       var tagname = memberList.rtctype[evt.from].tagName;    //何故か大文字が入るケースが在る
                       console.log("DEBUG: tagname: " + tagname );
                       if ( tagname.toLowerCase() === evt.resrtctype ) {
                           // 設定済で同じならパス
                                  console.log("DEBUG: rtctype No change! " + tagname + " | " + evt.resrtctype);
                                  return;

                       }  else {
                           // 再設定
                           var elm = document.getElementById("div" + evt.from);
                               elm.removeChild(memberList.rtctype[evt.from]);

                           memberList.rtctype[evt.from] = document.createElement(evt.resrtctype); // audio or video
                           memberList.rtctype[evt.from].setAttribute('id' , "stream" + evt.from );
                           memberList.rtctype[evt.from].setAttribute('autoplay' , 'autoplay');
                           memberList.rtctype[evt.from].setAttribute('controls', 'controls');

                           elm.appendChild(memberList.rtctype[evt.from]); 
                           console.log("DEBUG: set rtctype: " + evt.resrtctype + " wsid: " + evt.from );

                           return;
                      } // else
                   } // aline wsid else
               } // for
               return;
           } //if resrtctype 

           if ( evt.walkworld === "resuserdata" ){

               var reslist = evt.reslist;
             //  console.log("DEBUG: walkworld resuserdata: " + JSON.stringify(reslist) );

               ghostlist = reslist.filter( function(e,i){
                   return  e.category !== 'USER'; 
               });

            if ( ghostlist.length < ghostMax ) {
                // ghost出現イベント
                var mess = { "walkworld" : "entryghost" ,
                       "lat" : user_stat.loc.lat ,
                       "lng" : user_stat.loc.lng
                     }
                var messjson = JSON.stringify(mess);
                ws.send(messjson);
                console.log("DEBUG: send entryghost ");
            }

          ghostlist.filter ( function(e,i){
              if ( e.uid in map.ghostobjects) {
                         map.ghostobjects[e.uid].setMap(null);
              } 
              map.ghostobjects[e.uid] = new google.maps.Marker({
                           position: new google.maps.LatLng(e.loc.lat, e.loc.lng),
                           map: map.mapobj,
                           title: e.name,
                           icon: e.icon_url,
                      });
         });

         %# 消滅objectの判別、削除
         for ( var key in map.ghostobjects ){
             var flg = 0;
             ghostlist.filter ( function(e,i){
                 if ( e.uid === key ) {
                     flg = 1;  // 有り
                 }
             });
             if ( flg === 0 ) {
                         map.ghostobjects[key].setMap(null);
             }
         }

         // 未使用
         var geo_dirdis = reslist.filter( function(e,i){
                 // すべてのポイントの距離と方角
                 var p_dist = geoDistance( user_stat.loc.lat, user_stat.loc.lng, e.loc.lat, e.loc.lng, 6 );
                 var p_direc = geoDirection ( user_stat.loc.lat, user_stat.loc.lng, e.loc.lat, e.loc.lng);
                 return { uid : e.uid, distance : p_dist, direction : Math.ceil(p_direc), category : e.category };
         });


         //pointCalc(user_stat.rundirect, user_stat.beta);


           return;
        } // resusesrdata

        if ( evt.walkworld === 'hitdamage' ){

            user_stat.damagecount++;

            localStorage.user_stat = JSON.stringify(user_stat);
            sendsession();

            var mess = { "type" : "openchat",
                         "text" : evt.hituser + "にやられた。。。",
                         "user" : localStorage.user ,
                         "icon_url" : localStorage.icon_url
                       }; 

            ws.send(JSON.stringify(mess));

            return;
        }



    } // on message

// function eria!!!!

function usercheck(){
    %# サーバー側への廃止アカウントのチェック
    %#アカウント引き継ぎ済の場合、アカウントを削除する。
        
     var mess = { "type" : "obsoleteuid", "chkuid" : localStorage.uid }; // uidをolduidとして送る
     var messjson = JSON.stringify(mess);
     ws.send(messjson); //resolvはws経由で返る
     console.log("DEBUG: send obsoleteuid");

}

function usercheck2(){
    // uid削除機能を追加したので、別枠に
    %# localStorageに従って初期設定を行う
    //usercheckからwebsocketのレスポンスから

    %# uid ユーザー名 iconのチェック 変更確認
    if ( typeof(localStorage.uid) === "undefined" ){
        var uidobj = new jsSHA("SHA3-512", "TEXT");
        var timerec = JSON.stringify(Date.now());
        var random = JSON.stringify(Math.random());
            uidobj.update(timerec);
            uidobj.update(random);
            uidobj.update("sitedata");
            localStorage.uid = uidobj.getHash("HEX"); //初期設定
    }

    if ( typeof(localStorage.user) === "undefined" ) {
       localStorage.user = 'guest'; // 初期設定
       } 
    var uname = localStorage.user;

    var user = document.getElementById('user');
    %#user.innerHTML = "user id: " + uname;
    user.value = uname;

    if ((typeof(localStorage.icon_url) === 'undefined') || (localStorage.icon_url.match(/ciconimg/))) {
        %# icon_urlの文字列にciconimgが含まれる場合 頭文字でアイコン
        var char = localStorage.user.substr(0,1);
            localStorage.icon_url = "https://<%= $url_host %>/ciconimg?s=" + char ; //初期設定
    }  

    var icon = document.getElementById('uicon');
        icon.src = localStorage.icon_url ;

    %#初期化は以上

  //  const endtime = performance.now();
  //  console.log(endtime - starttime);
} 

%# wsidを登録するためにユーザー名を送信する
%# localStorageのバックアップを兼ねる take overで利用される
function sendsession(){

               var backuplocal = JSON.parse(JSON.stringify(localStorage));
                   backuplocal.type = 'entry';

               ws.send(JSON.stringify(backuplocal));
               console.log("message send: " + JSON.stringify(backuplocal));
}

function changeuser(){
   %# ws利用
   var changeuser = window.prompt("新しいユーザー名","");
      
       if ( typeof(changeuser) !== 'undefined')  {

               localStorage.user = changeuser;

               usercheck();  

               // 変更を送信する
               sendsession();

       } else { 
                   window.alert('キャンセルされました');
       } 

    return;
}


function upform(){
    %# submitを利用しない
    var form = document.getElementById("iconform");

    %# 空白はリターン
    var C = form.filename.value;
    console.log("DEBUG: " + JSON.stringify(C) );
    if ( C === "" ) {
        return false;
    }
    var form_data = new FormData(form);
        form_data.append("wsid" , sessionStorage.wsid );

    var xhr = new XMLHttpRequest();

        xhr.onload = function(e){

            console.log(xhr.responseText);
            %# レスポンスは確認のみ
            sendsession();
        }

        xhr.open("post","https://<%= $url_host %>/iconupload");

        xhr.send(form_data);
}

function icon_del(){

    var idx = localStorage.icon_url.indexOf('=');
        idx = ++idx;
    var oid = localStorage.icon_url.slice(idx);

    var mess = { "type" : "icondel" ,
                 "oid" : oid ,
               };
    var messjson = JSON.stringify(mess);
    ws.send(messjson);

    localStorage.removeItem("icon_url");
    usercheck();
    sendsession();
}

function member(){
   %# メンバーリストの更新 from は connidの登録に必要
    var getlist = {"type":"getlist" , "pubstat" : chatRoomInfo.pubstat , "roomname" : chatRoomInfo.roomname, "from" : sessionStorage.wsid }; 
    ws.send(JSON.stringify(getlist));
    console.log("send getlist message");
}

function reloadmem() {
                    // メンバーへのreload要請
                    var relmess = { "type" : "reloadmember" ,
                                    "roomname" : chatRoomInfo.roomname ,
                                    "pubstat" : chatRoomInfo.pubstat 
                                  };
                    var resmessjson = JSON.stringify(relmess);
                    ws.send(resmessjson); 

                    console.log("DEBUG: send reloadmember message!");
}

function call(){
    // callボタンはトグルする
    if ( chatRoomInfo.callStat === "call" ) {

        chatRoomInfo.callStat = "hangup";

        var btnobj = document.getElementById('btn' + sessionStorage.wsid);
            btnobj.innerHTML = "<img src=" + localStorage.icon_url + " > [" + localStorage.user + "] " + chatRoomInfo.callStat;

        console.log("Call start!");

        sendcall();

    } else if ( chatRoomInfo.callStat === "hangup" ) {

        chatRoomInfo.callStat = "call";
        var btnobj = document.getElementById('btn' + sessionStorage.wsid);
            btnobj.innerHTML = "<img src=" + localStorage.icon_url + " > [" + localStorage.user + "] " + chatRoomInfo.callStat;

        console.log("hung up!");

    var hangup = function(){
            return new Promise( function(resolv,reject){            
        var mess = { "roomname" : chatRoomInfo.roomname ,
                     "pubstat" : chatRoomInfo.pubstat ,
                     "type" : "detachvoice" ,
                     "from" : sessionStorage.wsid
                    };

       var messjson = JSON.stringify(mess);
       ws.send(messjson);
       resolv();
         });
       }
       hangup().then(function(){
           window.location.reload();
       });
    }
}


function delMemberList(e){
    // hungupを受けて表示用配列からwsidをキーとして削除する

            //表示を消す
            var ulobj = document.getElementById("chatroommember");
                ulobj.removeChild(memberList.memberListObjs[e]);

            delete memberList.memberListObjs[e];
            delete memberList.rtctype[e];
            console.log("DEBUG: delete memberList entry" + e );
            return;
}

function gotDevices(deviceInfos) {
      for (var i = 0; i !== deviceInfos.length; ++i) {
            console.log("DEBUG: deviceid: " + deviceInfos[i].deviceId + " kind: " + deviceInfos[i].kind );
      }
      deviceIDs = deviceInfos.filter( function (e,i){
                if ( e.kind == "videoinput" ) {
                    return e;
                }
            });
      return deviceIDs;
}

function handleError(error) {
  console.log('navigator.getUserMedia error: ', error);
}

function getQrcodeTake(){
    // Take Over 　の　QRcodeを表示する
    var form_data = new FormData();
    var encurl = encodeURI("https://<%= $url_host %>/transferuser/" + localStorage.uid);
        form_data.append("data" , encurl );

    var qrobj = document.getElementById('takeoverajaxpostdata');

    var xhr = new XMLHttpRequest();

        xhr.onload = function(e){
            //console.log(xhr.responseText);
            qrobj.innerHTML = xhr.responseText;
        }

        xhr.open("post","https://<%= $url_host %>/qrcode");
        xhr.send(form_data);
}

var pos = 0; // toggle用
function icon_rotate(){

    if ( pos > 3 ) { pos = 0; } // reset

    var list = [ '270' , '180' , '90' , '0' ];
    var idx = localStorage.icon_url.indexOf('=');
        idx = ++idx;
    var oid = localStorage.icon_url.slice(idx);

    var mess = { "type" : "iconrotate" , "oid" : oid , "oriented" : list[pos] };
    var messjson = JSON.stringify(mess);
    console.log("DEBUG: icon_rotate: " + messjson ); 

    ws.send(messjson);

    sendsession();

    pos = ++pos;
    return;
}

function changecam(){

    if ( chatRoomInfo.callStat === 'hangup' ) {
        console.log("DEBUG: callStat hangup becouse NOT ACTION!");
        return;
    }

    if ( cameraSwitch == 0 ) {
        cameraSwitch = 1;
    console.log("clieck button change " + cameraSwitch);
 
        startvoice();

    } else {
        cameraSwitch = 0;
    console.log("clieck button change " + cameraSwitch);

        startvoice();
    }
}

function upfile_f(){
    %# submitを利用しない
    var form = document.getElementById("fileform");

    %# 空白はリターン
    var C = form.filename.value;
    console.log("DEBUG: " + JSON.stringify(C) );
    if ( C === "" ) {
        return false;
    }
    var form_data = new FormData(form);
        form_data.append("wsid" , sessionStorage.wsid );
        form_data.append("roomname" , chatRoomInfo.roomname );
        form_data.append("pubstat" , chatRoomInfo.pubstat );

    var xhr = new XMLHttpRequest();

        xhr.onload = function(e){
            console.log(xhr.responseText);
            %# レスポンスは確認のみ
        }

       xhr.onerror = function(e){
           document.getElementById('picchat-img').innerHTML = "on Error : maybe too bigger!"; 
           return; 
       }

       try {
        xhr.open("post","https://<%= $url_host %>/fileupload");

        xhr.send(form_data);
       } catch(e) {
           document.getElementById('picchat-img').innerHTML = "catch Error : " + e;
           return; 
      }
}

function postpic(){

    var mess = {"type" : "chatroomchat" ,
                "text": tagtext.tag ,
                "user" : localStorage.user ,
                "icon_url" : localStorage.icon_url,
                "roomname" : chatRoomInfo.roomname ,
                "pubstat" : chatRoomInfo.pubstat
                };
    var messjson = JSON.stringify(mess);
    ws.send(messjson);
    tagtext = new Object;
    menuList.picchat_f(); //閉じる
}

function picture_rotate(){
%# posはiconと共用
    if ( pos > 3 ) { pos = 0; } // reset

    var list = [ '270' , '180' , '90' , '0' ];
    var oid = tagtext.oid;

    var divobj = document.getElementById('picchat-img');
        tagtext.tag = "<img width='350' higth='350' src=https://<%= $url_host %>/fileout?oid=" + tagtext.oid + "&oriented=" + list[pos] + "></img>";
        divobj.innerHTML = tagtext.tag;

    pos = ++pos;
    return;

}


function getPosition(){

    // userAgentを調べて、CrOSならタイマーをセット
    var userAgent = window.navigator.userAgent;
    var agentcheck = (userAgent.indexOf('CrOS') !== -1 );  // true or false

    if (agentcheck){
        if ( CrosTimer === null ){
        console.log("DEBUG: timearray: CrOS set Timer...");

        CrosTimer = window.setInterval( function() {
            console.log("DEBUG: loop getPosition...");
            // 一度止めて
            navigator.geolocation.clearWatch(map.watchID);
            getPosition();
        },10000); // 10sec

        timerarray.push(CrosTimer);
        } // if 
    }


    console.log("getPosition START!!!");

    var geoOptions = {
        enableHighAccuracy: true,   //高精度要求
        timeout: 3000,          //タイムアウト(ミリ秒)
        maximumAge: 0       //キャッシュ有効期限(ミリ秒)
    }
    map.watchID =  navigator.geolocation.watchPosition(successCallback, errorCallback,geoOptions);

    function successCallback(position) {

      // MAP表示センター指定
      user_stat.loc.lat = position.coords.latitude;
      user_stat.loc.lng = position.coords.longitude;

      user_stat.time = Date.now();

      var mess = { "walkworld" : "postuserdata" ,
                   "userdata" : user_stat ,
                 };

      // user_statの送信
      var messjson = JSON.stringify(mess);
      ws.send(messjson);
      console.log("DEBUG: send position data send");

      gpslocal_pos = {"gpslocation": {"latitude": position.coords.latitude,
                                      "longitude": position.coords.longitude,
                                      "altitude": position.coords.altitude,
                                      "accuracy": position.coords.accuracy,
                                      "altitudeAccuracy": position.coords.altitudeAccuracy,
                                      "heading": position.coords.heading,
                                      "speed": position.coords.speed
                                    }};

   //   console.log("GPS:" + JSON.stringify(gpslocal_pos) );
   //   console.log("GPS:" + JSON.stringify(user_stat) );

     // 再描写用 GPSの座標をセンターに再描写
      if ( typeof(map.makerobj) !== 'undefined' ) {
                                         map.makerobj.setMap(null);
      }
      var opt2 = { center: new google.maps.LatLng(user_stat.loc.lat, user_stat.loc.lng)};
      map.mapobj.setOptions(opt2);

      map.makerobj = new google.maps.Marker({
                           position: new google.maps.LatLng(user_stat.loc.lat, user_stat.loc.lng),
                           map: map.mapobj,
                           title: "mySelf",
                           icon: localStorage.icon_url,
                      });

    } //success

    function errorCallback(error) {
        var err_msg = "";
        switch(error.code)
          {
          case 1:
            err_msg = "位置情報の利用が許可されていません";
            break;
          case 2:
            err_msg = "デバイスの位置が判定できません";
            break;
          case 3:
            err_msg = "タイムアウトしました";
            break;
        }
        //  alert(err_msg);
        console.log("DEBUG: " + err_msg);
        return;
    }

};  // getPosition()

// map描写
google.maps.event.addDomListener(window, 'load', function() {
      map.map = document.getElementById("gmap");
      map.options = {
                    zoom: 18,
                    center: new google.maps.LatLng(user_stat.loc.lat, user_stat.loc.lng),
                    mapTypeId: google.maps.MapTypeId.ROADMAP,
                    scaleControl: true,
                  };
      map.mapobj = new google.maps.Map(map.map, map.options);
});

// 測地線航海算法の公式
function geoDistance(lat1, lng1, lat2, lng2, precision) {
  // 引数　precision は小数点以下の桁数（距離の精度）
  var distance = 0;
  if ((Math.abs(lat1 - lat2) < 0.00001) && (Math.abs(lng1 - lng2) < 0.00001)) {
    distance = 0;
  } else {
    lat1 = lat1 * Math.PI / 180;
    lng1 = lng1 * Math.PI / 180;
    lat2 = lat2 * Math.PI / 180;
    lng2 = lng2 * Math.PI / 180;

    var A = 6378140;
    var B = 6356755;
    var F = (A - B) / A;

    var P1 = Math.atan((B / A) * Math.tan(lat1));
    var P2 = Math.atan((B / A) * Math.tan(lat2));

    var X = Math.acos(Math.sin(P1) * Math.sin(P2) + Math.cos(P1) * Math.cos(P2) * Math.cos(lng1 - lng2));
    var L = (F / 8) * ((Math.sin(X) - X) * Math.pow((Math.sin(P1) + Math.sin(P2)), 2) / Math.pow(Math.cos(X / 2), 2) - (Math.sin(X) - X) * Math.pow(Math.sin(P1) - Math.sin(P2), 2) / Math.pow(Math.sin(X), 2));

    distance = A * (X + L);
    var decimal_no = Math.pow(10, precision);
    distance = Math.round(decimal_no * distance / 1) / decimal_no;   // kmに変換するときは(1000で割る)
  }
  return distance;
}

// Calc Direct
function geoDirection(lat1, lng1, lat2, lng2) {
  // 緯度経度 lat1, lng1 の点を出発として、緯度経度 lat2, lng2 への方位
  // 北を０度で右回りの角度０～３６０度
  var Y = Math.cos(lng2 * Math.PI / 180) * Math.sin(lat2 * Math.PI / 180 - lat1 * Math.PI / 180);
  var X = Math.cos(lng1 * Math.PI / 180) * Math.sin(lng2 * Math.PI / 180) - Math.sin(lng1 * Math.PI / 180) * Math.cos(lng2 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180 - lat1 * Math.PI / 180);
  var dirE0 = 180 * Math.atan2(Y, X) / Math.PI; // 東向きが０度の方向
  if (dirE0 < 0) {
    dirE0 = dirE0 + 360; //0～360 にする。
  }
  var dirN0 = (dirE0 + 90) % 360; //(dirE0+90)÷360の余りを出力 北向きが０度の方向
  return dirN0;
}

function pointCalc(rundirect , beta ){
    // 攻撃範囲の算出関数

         // 経度は、緯度によって変化する1km当たりの度数を返す
         var R = 6378.1; //km 
         var cf = Math.cos( user_stat.loc.lat / 180 * Math.PI) * 2 * Math.PI * R; // 円周 km
         var kd = cf / 360 ;  // 1度のkm
         var lng_km = 1 / kd; // 軽度/1km

         // 緯度 一定
         var cd = 2 * Math.PI * R;  // 円周 km
         var lat_d = cd / 360 ;  // 1度 km
         var lat_km = 1 / lat_d ; // 1km の 緯

     //   console.log("DEBUG: kmlat: " + lat_km + " kmlng: " + lng_km );

        var x;
        var y;
        // 30mを上限として、beta角で座標を取得する
        var reng = 30;
        if (( rundirect >= 0 ) && ( rundirect < 90 )){
            //北東
             x = user_stat.loc.lng + ((reng * lng_km) / 1000) * Math.cos(beta * Math.PI / 180) ;
             y = user_stat.loc.lat + ((reng * lat_km) / 1000) * Math.cos(beta * Math.PI / 180) ;

        } else if (( rundirect >= 90 ) && ( rundirect < 180 )){
            // 南東
             x = user_stat.loc.lng + ((reng * lng_km) / 1000) * Math.cos(beta * Math.PI / 180) ;
             y = user_stat.loc.lat - ((reng * lat_km) / 1000) * Math.cos(beta * Math.PI / 180) ;

       } else if (( rundirect >= 180 ) && ( rundirect < 270)){
            // 南西
             x = user_stat.loc.lng - ((reng * lng_km) / 1000) * Math.cos(beta * Math.PI / 180) ;
             y = user_stat.loc.lat - ((reng * lat_km) / 1000) * Math.cos(beta * Math.PI / 180) ;

       } else if (( rundirect >= 270 ) && ( rundirect < 360 )){
            // 北東 
             x = user_stat.loc.lng - ((reng * lng_km) / 1000) * Math.cos(beta * Math.PI / 180) ;
             y = user_stat.loc.lat + ((reng * lat_km) / 1000) * Math.cos(beta * Math.PI / 180) ;
       } 

    // x,y は自分の位置から方向を含めた相対位置:
    //console.log("DEBUG: X: " + x + " Y: " + y );

      var atk_dist = geoDistance( user_stat.loc.lat, user_stat.loc.lng, y, x, 6 );
      document.getElementById('reng').innerHTML = "<p>" +  atk_dist + " m </p>";

    // 方角と範囲に入っていると攻撃成功
    if ( ghostlist.length != -1 ) {
        ghostlist.filter( function(e,i){
            // x,y座標の5m範囲をヒットとする
            if (( e.loc.lat > (y - (5 * lat_km / 1000))) && ( e.loc.lat < (y + (5 * lat_km / 1000))) && ( e.loc.lng > (x - (5 * lat_km / 1000))) && ( e.loc.lng < (x + (5 * lng_km / 1000)))) {

                    var mess = { "walkworld" : "hitghost" ,
                                 "uid" : e.uid ,
                                 "sendto" : "ghostevent",  // pubsubのアドレス
                               }
                    ws.send(JSON.stringify(mess));
                    console.log("DEBUG: send hit ghost event ###########################################");
               };
           ghostlist.splice(i,1);
           user_stat.hitcount++;
        });
    }

    return ;
}

//未使用
function kmlatlng(lat, lng) {
         // 緯度によって変化する1km当たりの度数を返す
         var R = 6378.1; //km 
         var cf = Math.cos( lat / 180 * Math.pi) * 2 * Math.pi * R; // 円周 km
         var kd = cf / 360 ;  // 1度のkm
         var lng_km = 1 / kd; // 軽度/1km

         // 緯度 一定
         var cd = 2 * Math.pi * R;  // 円周 km
         var lat_d = cd / 360 ;  // 1度 km
         var lat_km = 1 / lat_d ; // 1km の 緯

    return ;
}

function deviceorientationHandler(event) {

    //  console.log("DEBUG: JAIRO START!!");

    %#  console.log("DEBUG: alpha: " + event.alpha);
    %#  console.log("DEBUG: beta: " + event.beta);
    %#  console.log("DEBUG: gamma: " + event.gamma);
    %#  console.log("DEBUG: absolute: " + event.absolute);

      document.getElementById('disp_orient').innerHTML = " alpha: " + event.alpha + "<br> beta: " + event.beta + "<br> gamma: " + event.gamma ;

      user_stat.rundirect = Math.ceil(360 - event.alpha);

      var arrowobj = document.getElementById('arrow');
          arrowobj.style.transform = "rotateZ(" + user_stat.rundirect + "deg)";

      user_stat.beta = event.beta ;

      pointCalc(user_stat.rundirect, user_stat.beta); // 攻撃位置算出

} // deviceorientationHandler

function devicemotionHandler(event) {

        a = {
        x : event.acceleration.x,
        y : event.acceleration.y,
        z : event.acceleration.z,
           };

      document.getElementById('disp_motion').innerHTML = " x: " + a.x + "<br> y: " + a.y + "<br> z: " + a.z ;

}



/// menu list toggle
var menuList = {};  // メニュー系トグル処理をまとめる

%# 表示切り替え
    menuList.iconUpToggle = true;  // true = none , false = block
    menuList.iconToggle_f = function(){
        if (menuList.iconUpToggle){
            menuList.iconUpToggle = false;
            document.getElementById("iconupload").style.display="block";  // 表示
        } else {
            menuList.iconUpToggle = true;
            document.getElementById("iconupload").style.display="none";   // 非表示
        }
    }   

    menuList.oChat = true;
    menuList.oChat_f = function(){
        if (menuList.oChat){
            menuList.oChat = false;
            document.getElementById("openchat").style.display="block";  // 表示

                document.getElementById('msg').addEventListener("keydown" , function(){   
                    if ((event.keyCode === 13) && (document.getElementById('msg').value )) {
                        var mess = {"type" : "openchat" ,
                                    "text": document.getElementById('msg').value ,
                                    "user" : localStorage.user ,
                                    "icon_url" : localStorage.icon_url
                                    };
                        var messjson = JSON.stringify(mess);
                        ws.send(messjson);
                        document.getElementById('msg').value = "";
                    }
                });

        } else {
            menuList.oChat = true;
            document.getElementById("openchat").style.display="none";   // 非表示
        }
    }

    menuList.croomListToggle = true;  // true = none , false = block
    menuList.croomList_f = function(){
        if (menuList.croomListToggle){
            menuList.croomListToggle = false;
            document.getElementById("chatroomlist").style.display="block";  // 表示

            var $mess = { "type" : "getlistchatroom" };
            ws.send(JSON.stringify($mess));

        } else {
            menuList.croomListToggle = true;
            document.getElementById("chatroomlist").style.display="none";   // 非表示

            if (typeof(elobj.aobj) === 'undefined' ){
                return;
            } else {
                var roomdiv = document.getElementById("roomlistout");
                    for ( var key in elobj.aobj ){
                        roomdiv.removeChild(elobj.aobj[key]);
                        console.log("DEBUG: remove: " + key );
                    }
            }
        }
    }   

    menuList.makeChatRoomToggle = true;  // true = none , false = block
    menuList.makeChatRoom_f = function(){
        if (menuList.makeChatRoomToggle){
            menuList.makeChatRoomToggle = false;
            document.getElementById("makechatroom").style.display="block";  // 表示

            document.getElementById('roomname').focus();

                document.getElementById('roomname').addEventListener("keydown" , function(){ 

                    if ((event.keyCode === 13) && (document.getElementById('roomname').value )) {

                        var element = document.getElementById('pubpri');
                        var radioNodeList = element.pubstat;
                            chatRoomInfo.pubstat = radioNodeList.value;
                            chatRoomInfo.roomname = document.getElementById('roomname').value;

                        var mess = {"type" : "makechatroom" , 
                                    "roomname": chatRoomInfo.roomname ,
                                    "user" : localStorage.user ,
                                    "icon_url" : localStorage.icon_url ,
                                    "wsid" : sessionStorage.wsid ,
                                    "pubstat" : chatRoomInfo.pubstat 
                                   };
                        var messjson = JSON.stringify(mess);
                        ws.send(messjson);
                        document.getElementById('roomname').value = "";
                        document.getElementById('roomdisplay').innerHTML = chatRoomInfo.pubstat + " " + chatRoomInfo.roomname ;
                        document.getElementById('cchat').focus();

                    member();
                    reloadmem();

                    } // keydown
                });

         // chatroom char chat 重複あり
                document.getElementById('cchat').addEventListener("keydown" , function(){   
                    if ((event.keyCode === 13) && (document.getElementById('cchat').value )) {

                        var messtext = document.getElementById('cchat').value.replace(/<("[^"]*"|'[^']*'|[^'">])*>/g, "");  // tag delete

                        var mess = {"type" : "chatroomchat" ,
                                    "text": messtext ,
                                    "user" : localStorage.user ,
                                    "icon_url" : localStorage.icon_url,
                                    "roomname" : chatRoomInfo.roomname ,
                                    "pubstat" : chatRoomInfo.pubstat
                                    };
                        var messjson = JSON.stringify(mess);
                        ws.send(messjson);
                        document.getElementById('cchat').value = "";
                        console.log("DEBUG: send chatroomchat");
                    }
                });


        } else {
            menuList.makeChatRoomToggle = true;
            document.getElementById("makechatroom").style.display="none";   // 非表示
        }
    }   

    menuList.accTakeOver = true;  // true = none , false = block
    menuList.accTakeOver_f = function(){
        if (menuList.accTakeOver){
            menuList.accTakeOver = false;
            getQrcodeTake();
            document.getElementById("acctakeover").style.display="block";  // 表示
        } else {
            menuList.accTakeOver = true;
            document.getElementById("acctakeover").style.display="none";   // 非表示
        }
    }   

    menuList.picchat = true;  // true = none , false = block  cchatのサブ画面
    menuList.picchat_f = function(){
        if (menuList.picchat){
            menuList.picchat = false;
            document.getElementById("picchat").style.display="block";  // 表示
        } else {
            menuList.picchat = true;
            document.getElementById("picchat").style.display="none";   // 非表示
            document.getElementById('picchat-img').innerHTML = "";
            document.getElementById('fileform').filename = "";
        }
    }   

    menuList.walkworld = true;  // true = none , false = block 
    menuList.walkworld_f = function(){
        if (menuList.walkworld){
            menuList.walkworld = false;
            document.getElementById("walkworldmap").style.display="block";  // 表示

            window.addEventListener("deviceorientation", deviceorientationHandler, true); 
            getPosition();

        } else {
            menuList.walkworld = true;
            document.getElementById("walkworldmap").style.display="none";   // 非表示
            // 追跡の停止
            navigator.geolocation.clearWatch(map.watchID);
            window.removeEventListener("deviceorientation", deviceorientationHandler, true);

            if ( CrosTimer !== null ){
                timerarray.filter( function(e,i){
                    if ( e === CrosTimer){
                        timerarray.splice(i,1);
                    }
                });

                clearInterval(CrosTimer);
                CrosTimer = null;
            } //if CrosTimer
           // statusの保存
           localStorage.user_stat = JSON.stringify(user_stat);
           sendsession(); //backloopにも書く
        }
    }   

    menuList.orientation = true;  // true = none , false = block 
    menuList.orientation_f = function(){
        if (menuList.orientation){
            menuList.orientation = false;
            document.getElementById("deviceorientation").style.display="block";  // 表示

            window.addEventListener("deviceorientation", deviceorientationHandler, true); 

        } else {
            menuList.orientation = true;

            window.removeEventListener("deviceorientation", deviceorientationHandler, true);

            document.getElementById("deviceorientation").style.display="none";   // 非表示
            document.getElementById('disp_orient').innerHTML = "";
        }
    }   

    menuList.motion = true;  // true = none , false = block 
    menuList.motion_f = function(){
        if (menuList.motion){
            menuList.motion = false;
            document.getElementById("devicemotion").style.display="block";  // 表示

            window.addEventListener("devicemotion", devicemotionHandler, true);

        } else {
            menuList.motion = true;

            window.removeEventListener("devicemotion", devicemotionHandler, true);
            document.getElementById("devicemotion").style.display="none";   // 非表示
            document.getElementById('disp_motion').innerHTML = "";
        }
    }   

function testws(){

    ws.close();
}

// main

window.onload = function(){

    //usercheck(); // usercheckにwsを組み込んだらエラーに成る。
    %# カメラデバイスの検出:
    navigator.mediaDevices.enumerateDevices().then(gotDevices).catch(handleError);
}

</script>

<div id='toppage'>
<headder>
testing with google chrome <br>
</headder>
<div class='userinfo'> 
User Infomation.<br>
    icon: <a onclick="menuList.iconToggle_f();"><img id='uicon'></img></a>
    user name: <input type='button' id='user' onclick="changeuser()" >
    <button style="color: #00ff00;" onclick="menuList.accTakeOver_f();">account Take Over</button>
</div>

<div class='menublock'>
    <details>
        <summary>Menu....</summary>
        <ul>
            <li><button style="color: #00ff00;" onclick="menuList.oChat_f();">open infomation</button></li>
            <li><button style="color: #00ff00;" onclick="menuList.croomList_f();">chat room List</button></li>
            <li><button style="color: #00ff00;" onclick="menuList.makeChatRoom_f();">WebRTC room start</button></li>
            <li><button style="color: #00ff00;" onclick="menuList.walkworld_f();">Ghost in map</button></li>
            <li><button style="color: #00ff00;" onclick="menuList.orientation_f();">Device Orientation</button></li>
            <li><button style="color: #00ff00;" onclick="menuList.motion_f();">Device Motion</button></li>
        </ul>
    </details>
</div>

%# iconupload block default dipslay: none
<div id='iconupload' style="display: none;"> 
Icon upload...(JPEG only)<br>
    <form method="post" id="iconform" action="/iconupload" enctype="multipart/form-data" style="display: inline;">
       <input type="file" accept="*/*;capture=camera" name="filename" id="upfile" onchange=""> 
       <input type="button" value="upload" onclick="upform();">
    </form>
    <input type="button" value="pic icon delete" onclick="icon_del();" style="display: inline;">
    <input type="button" value="icon Rotate choice" onclick="icon_rotate();">
</div>

<div id='openchat' style="display: none;">
    <div><h3>Open Infomation<h3></div>
    <p><input type="text" id="msg" placeholder="message..."></p>
    <ul id="openchatout"></ul>
</div>

<div id="chatroomlist" style="display: none;">
    Public Chat Room List
    <div><p id="roomlistout"></p></div>
</div>

<div id="makechatroom" style="display: none;">
    Chat Room 
    <form id="pubpri">
        <input type="radio" name="pubstat" value="public" checked>Public Chatroom</label>
        <input type="radio" name="pubstat" value="private" >Private Chatroom</label>
    </form>
    <div id="chatroomleft">
        <p id='roomdisplay'></p>
        <input type="text" id="roomname" placeholder="room...">
        <ul id="chatroommember" class='chatmem'></ul>
    </div>
    <div id="chatroomright">
        <input type="text" id="cchat" placeholder="message...">
        <input type="button" value="file open/close" onclick="menuList.picchat_f();" style="display: inline;">
                                         %# 2段階で画面が開く
            <div id='picchat' style='display: none;'> 
                <div id='picchat-img'></div>
                file upload...<br>
                <form method="post" id="fileform" action="/fileupload" enctype="multipart/form-data" style="display: inline;">
                    <input type="file" accept="*/*;capture=camera" name="filename" id="fileup" onchange=""> 
                    <input type="button" value="upload&check" onclick="upfile_f();">
                </form>
                <input type="button" value="picture Rotate choice" onclick="picture_rotate();">
                <input type="button" value="post pic" onclick="postpic();">
            </div>
        <ul id='chatroomout'></ul></p>
    </div>
</div>

<div id="acctakeover" style="display: none;">
QRcodeをスナップショットで保存してください。
アカウントを移動したいブラウザで開くことでアカウントを移動します。
<div id='takeoverajaxpostdata' ></div>
</div>

<div id='walkworldmap' style='display: none;'>
    Ghost in map... <a href="" style="color: #ff0000;">(位置情報は共有されません)</a>
      <div id='iconrotate'>
          <div id='reng'></div>
          <img src='https://<%= $url_host %>/geticon?oid=5ba7449dac3befd89f1462a79e5b60c3633b138414d005b6ef927dda' id='arrow'></img>
      </div>
      <div id="gmap" class="mapbase" style="width : 100%; height : 360px;"></div>
    <div class='menublock'>
        <details>
            <summary>Command....</summary>
            <ul>
                <li><button style="color: #ff0000;" onclick="">Attack</button></li>
                <li><button style="color: #ff0000;" onclick="();">Put Tower</button></li>
                <li><button style="color: #ff0000;" onclick="f();">Put Trap</button></li>
                <li><button style="color: #ff0000;" onclick="d_f();">Put messageEvent</button></li>
            </ul>
        </details>
    </div>
</div>

<div id='deviceorientation' style='display: none;'>
    <div id='disp_orient'></div>
</div>

<div id='devicemotion' style='display: none;'>
    <div id='disp_motion'></div>
</div>

<footer>
<h6>
    <52through+backbone at gmail.com>
</h6>
</footer>
</div>
